const express = require("express");
const router = express.Router();
const bcrypt = require("bcrypt");
const isAdmin = require("../middleware/accessControl")
const {User, validateUser, validateRole} = require("../models/user");
const{Role}=require("../models/role")
const mongoose = require("mongoose");

router.post("/",async(req,res)=>{
    console.log(req.body.user.email)

    if(req.body.user.email){
        req.body.user.email = req.body.user.email.toLowerCase().trim()
    }

    let user = await User.findOne({"user.email":req.body.user.email})

    if(user){
        return res.status(400).send({message:"The email is already in use"})
    }

    let {errorUser} = validateUser(req.body.user)

    if(errorUser){
        return res.status(400).send({ message: error.details[0].message });
    }

  let { errorRole}  = validateRole(req.body.role)

    if(errorRole){
        return res.status(400).send({ message: error.details[0].message})
    }

    console.log("here")
    let role=req.body.role;
    let priority = req.body.role.priority;
    
   let dbRole = await Role.findOne({priority:priority});
   if(!dbRole){
       return res.status(400).send("Invalid Role");
   }

    if (!role){
         role = await Role.findOne({priority:2});
    }
 
  const input = {
      user:{
        email:req.body.user.email,
        password:req.body.user.password,
        firstName:req.body.user.firstName,
        lastName:req.body.user.lastName,
        telephone:req.body.user.telephone,
        isEmailVerified:req.body.user.isEmailVerified?req.body.isEmailVerified:false
      },
      role:role
    
  }

  user = new User(input);
  console.log(user)

  //hash password
  const salt = await bcrypt.genSalt(10);
  console.log(user.password)
  const hashed = await bcrypt.hash(user.password,salt);
  user.password=hashed;
  await user.save();

  const token = user.generateAuthToken();

  return res.send({
      message:"You have been successfully signed up",
      token:token
  })

})


module.exports = router;